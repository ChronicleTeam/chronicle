use crate::{error::ApiResult, model::FieldOptions, query, Id};
use anyhow::anyhow;
use sqlx::{prelude::*, PgExecutor, Pool, Postgres, QueryBuilder, TransactionManager};

#[derive(FromRow)]
struct InsertField {
    field_id: Id,
    data_field_name: String,
}

pub async fn insert_field(
    connection: impl Acquire<'_, Database = Postgres>,
    table_id: Id,
    name: String,
    options: FieldOptions,
) -> ApiResult<Id> {
    let mut transaction = connection.begin().await?;

    let InsertField {
        field_id,
        data_field_name,
    } = sqlx::query_as(
        r#"
            INSERT INTO table_field (table_id, name, options)
            VALUES ($1, $2, $3)
            RETURNING field_id, data_field_name
        "#,
    )
    .bind(table_id)
    .bind(name)
    .bind(sqlx::types::Json(options.clone()))
    .fetch_one(transaction.as_mut())
    .await?;

    let column_type = match options {
        FieldOptions::Text { .. } => "TEXT",
        FieldOptions::Integer { .. } => "BIGINT",
        FieldOptions::Decimal { .. } => "DOUBLE",
        FieldOptions::Money { .. } => "numeric_money",
        FieldOptions::Progress { .. } => "INT NOT NULL DEFAULT 0",
        FieldOptions::DateTime { .. } => "TIMESTAMPTZ",
        FieldOptions::Interval { .. } => "INTERVAL",
        FieldOptions::WebLink { .. } => "COLLATE case_insensitive TEXT",
        FieldOptions::Email { .. } => "COLLATE case_insensitive TEXT",
        FieldOptions::Checkbox => "BOOLEAN NOT NULL DEFAULT FALSE",
        FieldOptions::Enumeration { .. } => "INT",
        FieldOptions::CreationDate { .. } | FieldOptions::ModificationDate { .. } => {
            transaction.commit().await?;
            return Ok(field_id);
        }
        FieldOptions::Image { .. } => Err(anyhow!("Not implemented"))?,
        FieldOptions::File { .. } => Err(anyhow!("Not implemented"))?,
    };

    let data_table_name = query::get_data_table_name(transaction.as_mut(), table_id).await?;

    // data_table_name and data_field_name generated by database NO INJECTION POSSIBLE
    sqlx::query(&format!(
        r#"
            ALTER TABLE {data_table_name}
            ADD COLUMN {data_field_name} {column_type}
        "#,
    ))
    .execute(transaction.as_mut())
    .await?;

    transaction.commit().await?;
    return Ok(field_id);
}
